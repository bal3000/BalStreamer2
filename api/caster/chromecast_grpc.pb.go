// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package caster

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChromecastClient is the client API for Chromecast service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChromecastClient interface {
	FindChromecasts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Chromecast_FindChromecastsClient, error)
}

type chromecastClient struct {
	cc grpc.ClientConnInterface
}

func NewChromecastClient(cc grpc.ClientConnInterface) ChromecastClient {
	return &chromecastClient{cc}
}

func (c *chromecastClient) FindChromecasts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Chromecast_FindChromecastsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Chromecast_ServiceDesc.Streams[0], "/chromecast.Chromecast/FindChromecasts", opts...)
	if err != nil {
		return nil, err
	}
	x := &chromecastFindChromecastsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Chromecast_FindChromecastsClient interface {
	Recv() (*FindChromecastsResponse, error)
	grpc.ClientStream
}

type chromecastFindChromecastsClient struct {
	grpc.ClientStream
}

func (x *chromecastFindChromecastsClient) Recv() (*FindChromecastsResponse, error) {
	m := new(FindChromecastsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChromecastServer is the server API for Chromecast service.
// All implementations must embed UnimplementedChromecastServer
// for forward compatibility
type ChromecastServer interface {
	FindChromecasts(*emptypb.Empty, Chromecast_FindChromecastsServer) error
	mustEmbedUnimplementedChromecastServer()
}

// UnimplementedChromecastServer must be embedded to have forward compatible implementations.
type UnimplementedChromecastServer struct {
}

func (UnimplementedChromecastServer) FindChromecasts(*emptypb.Empty, Chromecast_FindChromecastsServer) error {
	return status.Errorf(codes.Unimplemented, "method FindChromecasts not implemented")
}
func (UnimplementedChromecastServer) mustEmbedUnimplementedChromecastServer() {}

// UnsafeChromecastServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChromecastServer will
// result in compilation errors.
type UnsafeChromecastServer interface {
	mustEmbedUnimplementedChromecastServer()
}

func RegisterChromecastServer(s grpc.ServiceRegistrar, srv ChromecastServer) {
	s.RegisterService(&Chromecast_ServiceDesc, srv)
}

func _Chromecast_FindChromecasts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChromecastServer).FindChromecasts(m, &chromecastFindChromecastsServer{stream})
}

type Chromecast_FindChromecastsServer interface {
	Send(*FindChromecastsResponse) error
	grpc.ServerStream
}

type chromecastFindChromecastsServer struct {
	grpc.ServerStream
}

func (x *chromecastFindChromecastsServer) Send(m *FindChromecastsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Chromecast_ServiceDesc is the grpc.ServiceDesc for Chromecast service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chromecast_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chromecast.Chromecast",
	HandlerType: (*ChromecastServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindChromecasts",
			Handler:       _Chromecast_FindChromecasts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "caster/chromecast.proto",
}

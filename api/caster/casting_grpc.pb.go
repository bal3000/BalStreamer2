// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package caster

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CastingClient is the client API for Casting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CastingClient interface {
	CastStream(ctx context.Context, in *CastStartRequest, opts ...grpc.CallOption) (*CastStartResponse, error)
	StopStream(ctx context.Context, in *StopStreamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type castingClient struct {
	cc grpc.ClientConnInterface
}

func NewCastingClient(cc grpc.ClientConnInterface) CastingClient {
	return &castingClient{cc}
}

func (c *castingClient) CastStream(ctx context.Context, in *CastStartRequest, opts ...grpc.CallOption) (*CastStartResponse, error) {
	out := new(CastStartResponse)
	err := c.cc.Invoke(ctx, "/casting.Casting/CastStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *castingClient) StopStream(ctx context.Context, in *StopStreamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/casting.Casting/StopStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CastingServer is the server API for Casting service.
// All implementations must embed UnimplementedCastingServer
// for forward compatibility
type CastingServer interface {
	CastStream(context.Context, *CastStartRequest) (*CastStartResponse, error)
	StopStream(context.Context, *StopStreamRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCastingServer()
}

// UnimplementedCastingServer must be embedded to have forward compatible implementations.
type UnimplementedCastingServer struct {
}

func (UnimplementedCastingServer) CastStream(context.Context, *CastStartRequest) (*CastStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CastStream not implemented")
}
func (UnimplementedCastingServer) StopStream(context.Context, *StopStreamRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopStream not implemented")
}
func (UnimplementedCastingServer) mustEmbedUnimplementedCastingServer() {}

// UnsafeCastingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CastingServer will
// result in compilation errors.
type UnsafeCastingServer interface {
	mustEmbedUnimplementedCastingServer()
}

func RegisterCastingServer(s grpc.ServiceRegistrar, srv CastingServer) {
	s.RegisterService(&Casting_ServiceDesc, srv)
}

func _Casting_CastStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CastStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CastingServer).CastStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/casting.Casting/CastStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CastingServer).CastStream(ctx, req.(*CastStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casting_StopStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CastingServer).StopStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/casting.Casting/StopStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CastingServer).StopStream(ctx, req.(*StopStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Casting_ServiceDesc is the grpc.ServiceDesc for Casting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Casting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "casting.Casting",
	HandlerType: (*CastingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CastStream",
			Handler:    _Casting_CastStream_Handler,
		},
		{
			MethodName: "StopStream",
			Handler:    _Casting_StopStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "caster/casting.proto",
}
